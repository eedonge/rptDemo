<!DOCTYPE html>
<meta charset="utf-8">
<title>Force-Directed Graph</title>
<style>

.node {
  cursor: pointer;
  stroke: #000;
  stroke-width: 1.5px;
}

.link {
  fill: none;
  stroke: #9ecae1;
  stroke-width: 1.5px;
}

.link_o {
  stroke: #FF7171;
  stroke-width: 2px;
}

</style>
<body>
<a href="/">BACK</a>
<script>

var width = 960,
    height = 500,
    root;

var force = d3.layout.force()
    .size([width, height])
    .charge(-200)
    .linkDistance(30)
    .friction(0.7)
    .on("tick", tick);

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

var link = svg.selectAll(".link"),
    node = svg.selectAll(".node");

d3.json("/readme.flower.json", function(json) {
  root = json;
  update(true);
});

function update(first) {
  var nodes = flatten(root),
      links = d3.layout.tree().links(nodes);

  // Restart the force layout.
  force
      .nodes(nodes)
      .links(links)
      .start();

  first && console.log(link);

  // Update the links…
  link = link.data(links, function(d) { return d.target.id; });

  first && console.log(link);

  // Exit any old links.
  link.exit().remove();

  // Enter any new links.
  link.enter().insert("line", ".node")
      .attr("class", "link")
      .attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; });

  first && console.log(link);
  // Update the nodes…
  node = node.data(nodes, function(d) {
    return d.id;
  }).style("fill", color);

  // Exit any old nodes.
  node.exit().remove();

  // Enter any new nodes.
  node.enter().append("circle")
      .attr("class", "node")
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; })
      .attr("r", function(d) { return 10;}) //Math.sqrt(d.size) / 10 || 4.5; })
      .style("fill", color)
      .on("click", click)
      .on("mouseover", mouseOverFunction)
      .on("mouseout", mouseOutFunction)
      .call(force.drag);

  if (first) {
    var circle = d3.selectAll('circle');
    circle.each(function(d) {
      d._children = d.children;
      d.children = null;
    })
    update();
  }

}

function tick() {
  link.attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; });

  node.attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; });
}

// Color leaf nodes orange, and packages white or blue.
function color(d) {
  return d.id === 134 ? "#00FF29" : (d._children ? "#71C3FF" : d.children ? "#03F5FF" : "#FDBCFD");
}

// Toggle children on click.
function click(d) {
  if (!d3.event.defaultPrevented) {
    if (d.children) {
      d._children = d.children;
      d.children = null;
    } else {
      d.children = d._children;
      d._children = null;
    }
    update();
  }
}


function mouseOverFunction(d) {
  link
    .transition(500)
      .attr("class", function(o) {
        return o.source === d || o.target === d ? "link_o" : "link";
      });

  var circle = d3.select(this);

  circle
    .transition(500)
      .attr("r", 15);
}

function mouseOutFunction(d) {
  link
    .transition(500)
      .attr("class", "link");

  var circle = d3.select(this);

  circle
    .transition(500)
      .attr("r", 10);
}

// Returns a list of all nodes under the root.
function flatten(root) {
  var nodes = [], i = 0;

  function recurse(node) {
    if (node.children) {
      node.children.forEach(recurse);
    }
    if (!node.id) node.id = ++i;
    nodes.push(node);
  }

  recurse(root);
  return nodes;
}

</script>
